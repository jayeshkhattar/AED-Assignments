/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package com.mycompany.uberassignment.ui;

import Object.Car;
import Object.CarList;
import java.lang.reflect.Field;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author abc
 */
public class ListCarsJPanel extends javax.swing.JPanel {

    /**
     * Creates new form ListCarsJPanel
     */
    CarList carLst;
    Car car;
    private int index;
    private List<String> makeList;
    private List<Integer> yearList;
    private List<String> cityList;

    public ListCarsJPanel(CarList carLst) {
        initComponents();
        this.carLst = carLst;
        loadData();
        populateDataOnTable();
    }


    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jPanel1 = new javax.swing.JPanel();
        lblListCars = new javax.swing.JLabel();
        lblSortBy = new javax.swing.JLabel();
        comboSortList = new javax.swing.JComboBox<>();
        btnSearch = new javax.swing.JButton();
        btnDelete = new javax.swing.JButton();
        txtSearch = new javax.swing.JTextField();
        btnEdit = new javax.swing.JButton();
        jScrollPane4 = new javax.swing.JScrollPane();
        carList = new javax.swing.JTable();
        updatePanel = new javax.swing.JPanel();
        lblEditCar = new javax.swing.JLabel();
        lblOwnerName = new javax.swing.JLabel();
        combMake = new javax.swing.JComboBox<>();
        lblModel = new javax.swing.JLabel();
        txtModel = new javax.swing.JTextField();
        txtOwnerName = new javax.swing.JTextField();
        lblYear = new javax.swing.JLabel();
        combYear = new javax.swing.JComboBox<>();
        lblSeatCount = new javax.swing.JLabel();
        combSeat = new javax.swing.JComboBox<>();
        lblSerialNumber = new javax.swing.JLabel();
        txtSerialNumber = new javax.swing.JTextField();
        lblValidCertification = new javax.swing.JLabel();
        boolCertValid = new javax.swing.JCheckBox();
        lblAvailable = new javax.swing.JLabel();
        boolAvailable = new javax.swing.JCheckBox();
        btnSave = new javax.swing.JButton();
        lblCity = new javax.swing.JLabel();
        combCity = new javax.swing.JComboBox<>();
        lblMake1 = new javax.swing.JLabel();
        btnCancel = new javax.swing.JButton();
        btnFirstCarAvailable = new javax.swing.JButton();
        btnFilter = new javax.swing.JButton();
        comboFieldList = new javax.swing.JComboBox<>();
        comboValueDependent = new javax.swing.JComboBox<>();
        txtSearchFilter = new javax.swing.JTextField();
        btnFilterClear = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();

        setBackground(new java.awt.Color(255, 255, 153));
        setMaximumSize(new java.awt.Dimension(400, 400));
        setPreferredSize(new java.awt.Dimension(800, 800));

        jScrollPane1.setBackground(new java.awt.Color(255, 255, 153));

        jPanel1.setBackground(new java.awt.Color(255, 255, 153));

        lblListCars.setFont(new java.awt.Font("Lucida Grande", 1, 24)); // NOI18N
        lblListCars.setText("List Uber Cars");

        lblSortBy.setText("List by ");

        comboSortList.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Select", "Make", "Model", "Year", "City" }));
        comboSortList.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboSortListActionPerformed(evt);
            }
        });

        btnSearch.setText("Global Search");
        btnSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchActionPerformed(evt);
            }
        });

        btnDelete.setText("Delete Car Info");
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });

        txtSearch.setToolTipText("Global Search");

        btnEdit.setText("Edit Car Info");
        btnEdit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditActionPerformed(evt);
            }
        });

        jScrollPane4.setBackground(new java.awt.Color(255, 255, 153));

        carList.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Owner Name", "Make", "Model", "Year", "City", "Seat Count", "Serial Number", "Available", "Certificate"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane4.setViewportView(carList);

        updatePanel.setBackground(new java.awt.Color(255, 255, 153));
        updatePanel.setMaximumSize(new java.awt.Dimension(367, 367));
        updatePanel.setVisible(false);
        updatePanel.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        lblEditCar.setFont(new java.awt.Font("Lucida Grande", 1, 24)); // NOI18N
        lblEditCar.setText("Edit Car Details");
        updatePanel.add(lblEditCar, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 0, -1, -1));

        lblOwnerName.setText("Owner Name*");
        updatePanel.add(lblOwnerName, new org.netbeans.lib.awtextra.AbsoluteConstraints(23, 56, 133, 27));

        combMake.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Select", "Ford", "Cheverolet", "Jeep", "GMC", "Buick", "Dodge", "RAM", "Cadillac", "Lincoln", "Chrysler", "BMW", "Honda", "Hyundai", "Kia Motors", "Nissan", "Mercedes-Benz", "Volkswagen" }));
        updatePanel.add(combMake, new org.netbeans.lib.awtextra.AbsoluteConstraints(574, 54, -1, 30));

        lblModel.setText("Model*");
        updatePanel.add(lblModel, new org.netbeans.lib.awtextra.AbsoluteConstraints(23, 109, 133, -1));

        txtModel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtModelActionPerformed(evt);
            }
        });
        updatePanel.add(txtModel, new org.netbeans.lib.awtextra.AbsoluteConstraints(162, 102, 152, 30));

        txtOwnerName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtOwnerNameActionPerformed(evt);
            }
        });
        updatePanel.add(txtOwnerName, new org.netbeans.lib.awtextra.AbsoluteConstraints(162, 54, 152, 30));

        lblYear.setText("Year*");
        updatePanel.add(lblYear, new org.netbeans.lib.awtextra.AbsoluteConstraints(401, 102, 133, -1));

        combYear.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Select", "2021", "2020", "2019", "2018", "2017", "2016", "2015", "2014", "2013", "2012", "2011" }));
        updatePanel.add(combYear, new org.netbeans.lib.awtextra.AbsoluteConstraints(574, 102, 152, 30));

        lblSeatCount.setText("Seat Count*");
        updatePanel.add(lblSeatCount, new org.netbeans.lib.awtextra.AbsoluteConstraints(23, 158, 133, -1));

        combSeat.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Select", "2", "3", "4", "5", "6", "7" }));
        updatePanel.add(combSeat, new org.netbeans.lib.awtextra.AbsoluteConstraints(162, 152, 152, 30));

        lblSerialNumber.setText("Serial Number*");
        updatePanel.add(lblSerialNumber, new org.netbeans.lib.awtextra.AbsoluteConstraints(401, 151, -1, 30));

        txtSerialNumber.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtSerialNumberActionPerformed(evt);
            }
        });
        updatePanel.add(txtSerialNumber, new org.netbeans.lib.awtextra.AbsoluteConstraints(570, 150, 152, 30));

        lblValidCertification.setText("Valid Certification");
        updatePanel.add(lblValidCertification, new org.netbeans.lib.awtextra.AbsoluteConstraints(400, 200, -1, 30));
        updatePanel.add(boolCertValid, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 250, 152, 30));

        lblAvailable.setText("Available");
        updatePanel.add(lblAvailable, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 240, -1, 30));
        updatePanel.add(boolAvailable, new org.netbeans.lib.awtextra.AbsoluteConstraints(570, 200, 152, 30));

        btnSave.setText("Save");
        btnSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveActionPerformed(evt);
            }
        });
        updatePanel.add(btnSave, new org.netbeans.lib.awtextra.AbsoluteConstraints(220, 290, 114, -1));

        lblCity.setText("City*");
        updatePanel.add(lblCity, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 200, 133, -1));

        combCity.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Select", "Boston", "Los Angeles", "New York", "Charlotte", "Chicago" }));
        updatePanel.add(combCity, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 200, 152, 30));

        lblMake1.setText("Make*");
        updatePanel.add(lblMake1, new org.netbeans.lib.awtextra.AbsoluteConstraints(401, 55, 133, 27));

        btnCancel.setText("Cancel");
        btnCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelActionPerformed(evt);
            }
        });
        updatePanel.add(btnCancel, new org.netbeans.lib.awtextra.AbsoluteConstraints(370, 290, 114, -1));

        btnFirstCarAvailable.setText("First Car Available");
        btnFirstCarAvailable.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFirstCarAvailableActionPerformed(evt);
            }
        });

        btnFilter.setText("Filter");
        btnFilter.setEnabled(false);
        btnFilter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFilterActionPerformed(evt);
            }
        });

        comboFieldList.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Select", "Make", "Model", "Year", "City", "Seat Count", "Serial Number", "Available", "Valid Certificate" }));
        comboFieldList.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboFieldListActionPerformed(evt);
            }
        });

        comboValueDependent.setVisible(false);
        comboValueDependent.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboValueDependentActionPerformed(evt);
            }
        });

        txtSearchFilter.setVisible(false);
        txtSearchFilter.setToolTipText("Global Search");
        txtSearchFilter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtSearchFilterActionPerformed(evt);
            }
        });

        btnFilterClear.setText("Clear");
        btnFilter.setEnabled(false);
        btnFilterClear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFilterClearActionPerformed(evt);
            }
        });

        jLabel1.setText("Quick Filters -");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(30, 30, 30)
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnFirstCarAvailable)
                        .addGap(397, 397, 397)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(120, 120, 120)
                                .addComponent(btnDelete))
                            .addComponent(btnEdit)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 822, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(186, 186, 186)
                        .addComponent(comboFieldList, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(txtSearchFilter, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(comboValueDependent, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnFilter)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnFilterClear))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(40, 40, 40)
                        .addComponent(lblSortBy)
                        .addGap(14, 14, 14)
                        .addComponent(comboSortList, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(382, 382, 382)
                        .addComponent(txtSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btnSearch))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(294, 294, 294)
                        .addComponent(lblListCars, javax.swing.GroupLayout.PREFERRED_SIZE, 217, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(updatePanel, javax.swing.GroupLayout.PREFERRED_SIZE, 766, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(308, 308, 308))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(6, 6, 6)
                .addComponent(lblListCars, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(19, 19, 19)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblSortBy, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(comboSortList, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(txtSearch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(btnSearch)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(comboFieldList, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(comboValueDependent, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnFilter)
                    .addComponent(txtSearchFilter, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnFilterClear))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 294, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btnDelete)
                            .addComponent(btnEdit)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnFirstCarAvailable)
                            .addComponent(jLabel1))))
                .addGap(28, 28, 28)
                .addComponent(updatePanel, javax.swing.GroupLayout.PREFERRED_SIZE, 398, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jScrollPane1.setViewportView(jPanel1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 800, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 1000, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 60, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void comboSortListActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboSortListActionPerformed
        System.out.println("Here");
        String selectedSort = comboSortList.getSelectedItem().toString();
        carLst.setSort(selectedSort);
        for(Car c : carLst.getCarLst()) {
            System.out.println("--Se--"+c.getSerialNumber());
        }

        Collections.sort(carLst.getCarLst(), carLst);
        for(Car c : carLst.getCarLst()) {
            System.out.println("--Se1--"+c.getSerialNumber());
        }
        DefaultTableModel model = (DefaultTableModel) carList.getModel();
        model.setRowCount(0);
        for(Car c : carLst.getCarLst()) {
            
            Object[] obj = new Object[9];
            obj[0] = c;
            obj[1] = c.getMake();
            obj[2] = c.getModel();
            obj[3] = c.getYear();
            obj[4] = c.getCity();
            obj[5] = c.getSeatCount();
            obj[6] = c.getSerialNumber();
            obj[7] = c.getAvailabiltyStatusStr();
            obj[8] = c.isMaintainCertValidStr();
            model.addRow(obj);
        }
    }//GEN-LAST:event_comboSortListActionPerformed

    private void btnSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchActionPerformed
        String searchTxt = txtSearch.getText();
        DefaultTableModel model = (DefaultTableModel) carList.getModel();
        model.setRowCount(0);
        for(Car c : carLst.getCarLst()) {
            if(c.getMake().contains(searchTxt) || c.getModel().contains(searchTxt) || c.getCity().contains(searchTxt) 
                    || c.getSerialNumber().contains(searchTxt)) {
                Object[] obj = new Object[9];
                obj[0] = c;
                obj[1] = c.getMake();
                obj[2] = c.getModel();
                obj[3] = c.getYear();
                obj[4] = c.getCity();
                obj[5] = c.getSeatCount();
                obj[6] = c.getSerialNumber();
                obj[7] = c.getAvailabiltyStatusStr();
                obj[8] = c.isMaintainCertValidStr();
                model.addRow(obj);
            }
        }
        if(model.getRowCount() == 0) {
            JOptionPane.showMessageDialog(this, "No Records Found with this criteria.");
        }
    }//GEN-LAST:event_btnSearchActionPerformed

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        // TODO add your handling code here:
        int rowIndex = carList.getSelectedRow();
        if(rowIndex < 0) {
            JOptionPane.showMessageDialog(this, "Please select a row to delete.");
        }
        else {
            DefaultTableModel model = (DefaultTableModel) carList.getModel();
            index = rowIndex;
            car = (Car) model.getValueAt(rowIndex, 0);
            carLst.deleteCar(car);
            car = null;
            JOptionPane.showMessageDialog(this, "Car info deleted.");
            populateDataOnTable();
        }
    }//GEN-LAST:event_btnDeleteActionPerformed

    private void btnEditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditActionPerformed
        int rowIndex = carList.getSelectedRow();
        if(rowIndex < 0) {
            JOptionPane.showMessageDialog(this, "Please select a row to edit.");
        }
        else {
            DefaultTableModel model = (DefaultTableModel) carList.getModel();
            index = rowIndex;
            car = (Car) model.getValueAt(rowIndex, 0);
            txtOwnerName.setText(car.getOwnerName());
            boolAvailable.setSelected(car.getAvailabiltyStatus());
            boolCertValid.setSelected(car.isMaintainCertValid());
            combYear.setSelectedItem(String.valueOf(car.getYear()));
            combSeat.setSelectedItem(String.valueOf(car.getSeatCount()));
            combMake.setSelectedItem(car.getMake());
            combCity.setSelectedItem(car.getCity());
            txtSerialNumber.setText(car.getSerialNumber());
            txtModel.setText(car.getModel());
            updatePanel.setVisible(true);
        }
    }//GEN-LAST:event_btnEditActionPerformed

    private void btnCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelActionPerformed
        JOptionPane.showMessageDialog(this, "Car data not updated.");
        updatePanel.setVisible(false);
    }//GEN-LAST:event_btnCancelActionPerformed

    private void btnSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveActionPerformed
        String error = "";
        if(error == "")
        error = car.setOwnerName(txtOwnerName.getText());
        if(error == "")
        error = car.setMake(combMake.getSelectedItem().toString());
        if(error == "")
        error = car.setModel(txtModel.getText());
        if(error == "")
        error = car.setYear(combYear.getSelectedItem().toString());
        if(error == "")
        error = car.setSeatCount(combSeat.getSelectedItem().toString());
        if(error == "")
        error = car.setSerialNumber(txtSerialNumber.getText());
        if(error == "")
        error = car.setCity(combCity.getSelectedItem().toString());
        if(error == "")
        error = car.setMaintainCertValid(boolCertValid.isSelected());
        if(error == "")
        error = car.setAvailabiltyStatus(car.getAvailabiltyStatus());

        String message = error.equals("") ? "Car Info Updated." : error;

        JOptionPane.showMessageDialog(this, message);
        if(error.equals("")) {
            int i = 0;
            for(Car c : carLst.getCarLst()) {
                if(i == index) {
                    c.setOwnerName(txtOwnerName.getText());
                    c.setAvailabiltyStatus(boolAvailable.isSelected());
                    c.setCity(combCity.getSelectedItem().toString());
                    c.setMaintainCertValid(boolCertValid.isSelected());
                    c.setMake(combMake.getSelectedItem().toString());
                    c.setModel(txtOwnerName.getText());
                    c.setSeatCount(combSeat.getSelectedItem().toString());
                    c.setSerialNumber(txtSerialNumber.getText());
                    c.setYear(combYear.getSelectedItem().toString());
                }
                i++;
            }
            updatePanel.setVisible(false);
            populateDataOnTable();
        }
    }//GEN-LAST:event_btnSaveActionPerformed

    private void txtSerialNumberActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtSerialNumberActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtSerialNumberActionPerformed

    private void txtOwnerNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtOwnerNameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtOwnerNameActionPerformed

    private void txtModelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtModelActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtModelActionPerformed

    private void btnFirstCarAvailableActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFirstCarAvailableActionPerformed
        DefaultTableModel model = (DefaultTableModel) carList.getModel();
        model.setRowCount(0);
        Car c = new Car();
        for(Car cr : carLst.getCarLst()) {
            if(cr.getAvailabiltyStatus()) {
                c = cr;
                break;
            }
        }
        Object[] obj = new Object[9];
        obj[0] = c;
        obj[1] = c.getMake();
        obj[2] = c.getModel();
        obj[3] = c.getYear();
        obj[4] = c.getCity();
        obj[5] = c.getSeatCount();
        obj[6] = c.getSerialNumber();
        obj[7] = c.getAvailabiltyStatusStr();
        obj[8] = c.isMaintainCertValidStr();
        model.addRow(obj);
        btnFilter.setEnabled(true);
        txtSearchFilter.setVisible(false);
        comboValueDependent.setVisible(false);
        btnFilter.setEnabled(false);
        comboFieldList.setSelectedItem("Select");
        
    }//GEN-LAST:event_btnFirstCarAvailableActionPerformed

    private void btnFilterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFilterActionPerformed
        // TODO add your handling code here:
        String fieldVal = comboFieldList.getSelectedItem().toString();
        System.out.println("here1--"+fieldVal);
        String valueVal;
        boolean isAll = false;
        if(fieldVal != "Serial Number" && fieldVal != "Model") {
            valueVal = comboValueDependent.getSelectedItem().toString();
            isAll = valueVal == "All" ? true : false;
        }
        else 
            valueVal = txtSearchFilter.getText();            
        btnFilterClear.setEnabled(true);        
        DefaultTableModel model = (DefaultTableModel) carList.getModel();
        model.setRowCount(0);
        for(Car c : carLst.getCarLst()) {
            String filterField = getFieldValue(c,fieldVal);
            if(isAll == true || (isAll == false && filterField.contains(valueVal))) {
                Object[] obj = new Object[9];
                obj[0] = c;
                obj[1] = c.getMake();
                obj[2] = c.getModel();
                obj[3] = c.getYear();
                obj[4] = c.getCity();
                obj[5] = c.getSeatCount();
                obj[6] = c.getSerialNumber();
                obj[7] = c.getAvailabiltyStatusStr();
                obj[8] = c.isMaintainCertValidStr();
                model.addRow(obj);
            }
        }
        if(model.getRowCount() == 0) {
            JOptionPane.showMessageDialog(this, "No Records Found with this criteria.");
        }
    }//GEN-LAST:event_btnFilterActionPerformed

    private void comboFieldListActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboFieldListActionPerformed
        // TODO add your handling code here:
        String val = comboFieldList.getSelectedItem().toString();
        System.out.println("here--"+val);
        if(val == "Select") {
            txtSearchFilter.setVisible(false);
            comboValueDependent.setVisible(false);
            btnFilter.setEnabled(false);
            btnFilterClear.setEnabled(false);
        }
        else if(val == "Make" || val == "Year" || val == "Seat Count" || val == "City" || val == "Available" || val == "Certificate Available") {
            comboValueDependent.setVisible(true);
            txtSearchFilter.setVisible(false);
            comboValueDependent.removeAllItems();
            btnFilterClear.setEnabled(false);
            btnFilter.setEnabled(true);
            comboValueDependent.addItem("All");
            if(val == "Make") {
                for(String str : makeList) {
                    comboValueDependent.addItem(str);                    
                }
            }
            else if(val == "Year") {
                for(Integer str : yearList) {
                    comboValueDependent.addItem(str.toString());                    
                }
            }
            else if(val == "City") {
                for(String str : cityList) {
                    comboValueDependent.addItem(str);                    
                }
            }
            else if(val == "Available" || val == "Valid Certificate") {
                comboValueDependent.addItem("Yes");                    
                comboValueDependent.addItem("No");                    
            }
            else if(val == "Seat Count") {
                for(int i=2;i<=7;i++) {
                    comboValueDependent.addItem(String.valueOf(i));                    
                }                
            }
        }
        else if(val == "Serial Number" || val == "Model") {
            comboValueDependent.setVisible(false);
            txtSearchFilter.setVisible(true);
            btnFilter.setEnabled(true);
            btnFilterClear.setEnabled(false);
        }
    }//GEN-LAST:event_comboFieldListActionPerformed

    private void comboValueDependentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboValueDependentActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_comboValueDependentActionPerformed

    private void txtSearchFilterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtSearchFilterActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtSearchFilterActionPerformed

    private void btnFilterClearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFilterClearActionPerformed
        txtSearchFilter.setVisible(false);
        comboValueDependent.setVisible(false);
        btnFilter.setEnabled(false);
        btnFilterClear.setEnabled(false);
        comboFieldList.setSelectedItem("Select");
        populateDataOnTable();
    }//GEN-LAST:event_btnFilterClearActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox boolAvailable;
    private javax.swing.JCheckBox boolCertValid;
    private javax.swing.JButton btnCancel;
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnEdit;
    private javax.swing.JButton btnFilter;
    private javax.swing.JButton btnFilterClear;
    private javax.swing.JButton btnFirstCarAvailable;
    private javax.swing.JButton btnSave;
    private javax.swing.JButton btnSearch;
    private javax.swing.JTable carList;
    private javax.swing.JComboBox<String> combCity;
    private javax.swing.JComboBox<String> combMake;
    private javax.swing.JComboBox<String> combSeat;
    private javax.swing.JComboBox<String> combYear;
    private javax.swing.JComboBox<String> comboFieldList;
    private javax.swing.JComboBox<String> comboSortList;
    private javax.swing.JComboBox<String> comboValueDependent;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JLabel lblAvailable;
    private javax.swing.JLabel lblCity;
    private javax.swing.JLabel lblEditCar;
    private javax.swing.JLabel lblListCars;
    private javax.swing.JLabel lblMake1;
    private javax.swing.JLabel lblModel;
    private javax.swing.JLabel lblOwnerName;
    private javax.swing.JLabel lblSeatCount;
    private javax.swing.JLabel lblSerialNumber;
    private javax.swing.JLabel lblSortBy;
    private javax.swing.JLabel lblValidCertification;
    private javax.swing.JLabel lblYear;
    private javax.swing.JTextField txtModel;
    private javax.swing.JTextField txtOwnerName;
    private javax.swing.JTextField txtSearch;
    private javax.swing.JTextField txtSearchFilter;
    private javax.swing.JTextField txtSerialNumber;
    private javax.swing.JPanel updatePanel;
    // End of variables declaration//GEN-END:variables
    private void populateDataOnTable() {
        DefaultTableModel model = (DefaultTableModel) carList.getModel();
        model.setRowCount(0);

        for(Car c : carLst.getCarLst()) {
            Object[] obj = new Object[9];
            obj[0] = c;
            obj[1] = c.getMake();
            obj[2] = c.getModel();
            obj[3] = c.getYear();
            obj[4] = c.getCity();
            obj[5] = c.getSeatCount();
            obj[6] = c.getSerialNumber();
            obj[7] = c.getAvailabiltyStatusStr();
            obj[8] = c.isMaintainCertValidStr();
            
            model.addRow(obj);
        }
        btnFilterClear.setEnabled(false);
        btnFilter.setEnabled(false);
    }
    public void loadData() {
        makeList = new ArrayList<String>();
        makeList.add("Ford");
        makeList.add("Cheverolet");
        makeList.add("Jeep");
        makeList.add("GMC");
        makeList.add("Buick");
        makeList.add("Dodge");
        makeList.add("RAM");
        makeList.add("Cadillac");
        makeList.add("Lincoln");
        makeList.add("Chrysler");
        makeList.add("BMW");
        makeList.add("Honda");
        makeList.add("Hyundai");
        makeList.add("Kia Motors");
        makeList.add("Nissan");
        makeList.add("Mercedes-Benz");
        makeList.add("Volkswagen");

        yearList = new ArrayList<Integer>();
        yearList.add(2021);
        yearList.add(2020);
        yearList.add(2019);
        yearList.add(2018);
        yearList.add(2017);
        yearList.add(2016);
        yearList.add(2015);
        yearList.add(2014);
        yearList.add(2013);
        yearList.add(2012);
        yearList.add(2011);
        yearList.add(2010);
        
        cityList = new ArrayList<String>();
        cityList.add("Boston");
        cityList.add("Los Angeles");
        cityList.add("New York");
        cityList.add("Charlotte");
        cityList.add("Chicago");

    }
    public String getFieldValue(Car c, String fieldVal) {
        if(fieldVal == "Make") 
            return c.getMake();
        else if(fieldVal == "Model") 
            return c.getModel();
        else if(fieldVal == "Year") 
            return String.valueOf(c.getYear());
        else if(fieldVal == "Available") 
            return c.getAvailabiltyStatusStr();
        else if(fieldVal == "Valid Certificate") 
            return c.isMaintainCertValidStr();
        else if(fieldVal == "City") 
            return c.getCity();
        else if(fieldVal == "Model")
            return c.getModel();
        else if(fieldVal == "Serial Number")
            return c.getSerialNumber();
        return null;
    }
}
